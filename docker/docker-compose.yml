services:
  postgres:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis:latest
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"
  kafka:
    image: apache/kafka:latest
    container_name: kafka_container
    restart: always
    ports:
      - "9092:9092"
  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq_container
    restart: always
    ports:
      - "5672:5672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 20s
      retries: 5
  user-service:
    build:
      context: ../backend/user-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      PORT: "5000"
      CORS_ORIGIN: ${CORS_ORIGIN}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    depends_on:
      - postgres
  alert-service:
    build:
      context: ../backend/alert-service
      dockerfile: Dockerfile
    ports:
      - "5100:5100"
    environment:
      PORT: "5100"
      CORS_ORIGIN: ${CORS_ORIGIN}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      FIREBASE_API_KEY: ${FIREBASE_API_KEY}
      FIREBASE_AUTH_DOMAIN: ${FIREBASE_AUTH_DOMAIN}
      FIREBASE_DATABASE_URL: ${FIREBASE_DATABASE_URL}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_STORAGE_BUCKET: ${FIREBASE_STORAGE_BUCKET}
      FIREBASE_MESSAGING_SENDER_ID: ${FIREBASE_MESSAGING_SENDER_ID}
      FIREBASE_APP_ID: ${FIREBASE_APP_ID}
      FIREBASE_MEASUREMENT_ID: ${FIREBASE_MEASUREMENT_ID}
    depends_on:
      - postgres
  notification-service:
    build:
      context: ../backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "5200:5200"
    environment:
      PORT: "5200"
      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      FIREBASE_KEY_PAIR: ${FIREBASE_KEY_PAIR}
      FIREBASE_ADMIN_URL: ${FIREBASE_ADMIN_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      FIREBASE_API_KEY: ${FIREBASE_API_KEY}
      FIREBASE_AUTH_DOMAIN: ${FIREBASE_AUTH_DOMAIN}
      FIREBASE_DATABASE_URL: ${FIREBASE_DATABASE_URL}
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}
      FIREBASE_STORAGE_BUCKET: ${FIREBASE_STORAGE_BUCKET}
      FIREBASE_MESSAGING_SENDER_ID: ${FIREBASE_MESSAGING_SENDER_ID}
      FIREBASE_APP_ID: ${FIREBASE_APP_ID}
      FIREBASE_MEASUREMENT_ID: ${FIREBASE_MEASUREMENT_ID}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
    depends_on:
      rabbitmq:
        condition: service_healthy
volumes:
  postgres_data:
# docker-compose up -d
# docker-compose down
# docker exec -it postgres_container psql -U user -d crypto_tracker
# sudo lsof -i :5432
# sudo kill -9 <PID>